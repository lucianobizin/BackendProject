paths:

  /api/sessions/register:
    post:
      summary: Register users (send an email if everything goes well).
      tags:
        - sessions
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "success"
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/user"
        '500':
          description: Server error! Revise db connection, and if the error persists, communicate with MongoDB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message

  /api/sessions/login:
    post:
      summary: Login users.
      tags:
        - sessions
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "success"
                  payload:
                    type: string
                    description: A success message
        '500':
          description: Server error! Revise db connection, and if the error persists, communicate with MongoDB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message

  /api/sessions/passwordRestoreRequest:
    post:
      summary: Send an email to users who desire to restore their passwords.
      tags:
        - sessions
      responses:
        '200':
          description: Success response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "success"
                  payload:
                    type: string
                    description: A success message
        '400':
          description: User is not registered in our database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server error! Review database connection, and if the error persists, communicate with MongoDB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message

  /api/sessions/password-restore:
    put:
      summary: Update new user's password in the database.
      tags:
        - sessions
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "success"
                  payload:
                    type: string
                    description: A success message
        '400':
          description: User is not registered in the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server error! Revise db connection, and if the error persists, communicate with MongoDB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message

  /api/sessions/github:
    get:
      summary: Calls GitHub to get the callback endpoint to allow a user to log in.
      tags:
        - sessions
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "success"
                  payload:
                    type: string
                    description: A success message
        '500':
          description: Server error! Revise db connection, and if the error persists, communicate with MongoDB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message

  /api/sessions/google:
    get:
      summary: Calls Google to get the callback endpoint to allow a user to log in.
      tags:
        - sessions
      responses:
        "200":
          description: Success response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "success"
                  payload:
                    type: string
                    description: A success message
        '500':
          description: Server error! Revise db connection, and if the error persists, communicate with MongoDB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message

  /api/sessions/githubcallback:
    get:
      summary: Login service by Google (send a register email to those accessing by this means).
      tags:
        - sessions
      responses:
        "200":
          description: Success response (profile data).
          content:
            text/html:
              schema:
                type: string
        '500':
          description: Server error! Revise db connection, and if the error persists, communicate with MongoDB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message

  /api/sessions/profile:
    get:
      summary: Send user's profile data to the profile page.
      tags:
        - sessions
      responses:
        "200":
          description: Success response.
          content:
            text/html:
              schema:
                type: string
        '500':
          description: Server error! Revise db connection, and if the error persists, communicate with MongoDB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message.

  /api/sessions/logout:
    post:
      summary: Log out service.
      tags:
        - sessions
      responses:
        "200":
          description: Success response.
          content:
            text/html:
              schema:
                type: string
        '500':
          description: Server error! Revise db connection, and if the error persists, communicate with MongoDB.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Request state "error"
                  message:
                    type: string
                    description: Error message

components:
  schemas:
    user:
      type: object
      properties:
        _id:
          type: string
          description: user's id.
        firstName:
          type: string
          description: user's firstname.
        lastName:
          type: string
          description: user's lastname.
        email:
          type: string
          description: user's email.
          format: email
        birthDate:
          type: string
          description: user's birthdate
          format: date-time
        userName:
          type: string
          description: user's username.
        password:
          type: string
          description: ticket unique identifier.
        role:
          type: string
          description: user's password (hashed).
          enum: ['user', 'premium', 'admin']
        cart:
          type: string
          description: user's cart